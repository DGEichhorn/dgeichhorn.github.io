---
title: "Machine Learning for Managing Stock Portfolios"
description: "TO DO"
author: "Dominik G. Eichhorn"
date: "5/1/2022"
image: "cover.jpg"
categories:
  - Machine Learning
  - Portfolio Management
  - Python
bibliography: references.bib
---


Those interested in the technical details may scroll down to the bottom (section Appendix), where the pdf-file of my master's thesis is displayed. Unlike the other posts, in the remainder of this post, I will not go into the technical details or show any code. I will rather give an high-level overview of what I did as part of my master's thesis.

# Introduction

In their seminal paper, @gu2020empirical describe how supervised machine learning models can be utilized to manage stock portfolios. They report that empirically these so-called machine learning portfolios deliver substantial risk-adjusted outperformance. However, their analyses only consider gross returns, i.e., before transaction costs. This is a problem insofar as these machine learning portfolios very frequently buy stocks and sell them shortly afterwards (or the other way around). Each of these stock-level transactions leads to costs which reduce the net returns of the portfolio. It is therefore a fair question what the net return of these machine learning portfolios is.

In trying to answer this question, I encountered two major challenges. First, @gu2020empirical do not provide any code for the construction of the machine learning portfolios. Hence, I had to replicate their approach from scratch in Python based on the descriptions in their paper. Second, in order to calculate the net returns I need at every point in time the stock-level transaction costs for all stocks considered (or at least an estimate of them). My supervisor pointed out to me that such a data set had recently been made publicly available by @chen2021open, which I then used for my analyses.

In the following, I will first briefly say something about the data set I used. Then, I will give a high-level description of how I constructed the machine learning portfolios. Subsequently, I will present my results on their after-transaction-cost performance.

# Data

The data, upon which my analyses were based, covered monthly information on approx. 8.000 major US exchanged-listed stocks between 1970 and 2017. For every stock, I have for each month a set of 202 stock/firm specific characteristics, its gross return as well as its transaction/trading cost (i.e. half the spread).

# Approach

The foundation upon which machine learning portfolios are based is a prediction model. The prediction model takes the characteristics of each stock in month $t$ as input and outputs for each stock a prediction of the gross return realized in month $t+1$. The prediction model is gradually updated overtime using an expanding window approach. 

I trained and tuned a broad variety of prediction models. These include several baseline unpenalized and penalized linear models, tree based models such as random forests and gradient boosted trees, and multiple deep learning models. 



# Results

rolling window approach to predict returns based on historical information; use different machine learning models

at the end of each month we can for each stock predicht the return for the upcomming month; sort stocks according to their predicted return; go long in upper 10 percent; go short in lower 10 percent; this is called decile spread portfolio

so this is what gu kelly xu did

i extend it: because i look also at after cost performance; crucial because very high turnover leading to high transaction costs

# Appendix

```{=html}
<embed src="Thesis.pdf" width="800px" height="2100px" />
```